// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String         @id @default(cuid())
  firstName   String
  lastName    String
  email       String         @unique
  password    String
  address     String?
  city        String?
  country     String?
  phone       String?
  active      Boolean        @default(true)
  dateCreated DateTime       @default(now())
  orders      Order[]
  cart        Cart?
  favorites   Favorites?
  image       CustomerImage?
  comments    Comment[]
}

model CustomerImage {
  id          String   @id @default(uuid())
  customerId  String   @unique
  user        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  imageUrl    String
  dateCreaded DateTime @default(now())
}

model Cart {
  id          String      @id @default(uuid())
  customerId  String      @unique
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  cartItems   CartItems[]
  dateCreated DateTime    @default(now())
}

model Favorites {
  id            String          @id @default(uuid())
  customerId    String          @unique
  customer      Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  favoriteItems FavoriteItems[]
  dateCreated   DateTime        @default(now())
}

model CartItems {
  id          String   @id @default(uuid())
  cartId      String
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int
  dateCreated DateTime @default(now())
}

model FavoriteItems {
  id          String    @id @default(uuid())
  favoriteId  String
  favorite    Favorites @relation(fields: [favoriteId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  dateCreated DateTime  @default(now())
}

model Seller {
  id         String       @id @default(uuid())
  firstName  String?
  lastName   String?
  storeName  String       @unique
  email      String       @unique
  password   String
  address    String?
  city       String?
  country    String?
  phone      String?
  active     Boolean      @default(true)
  dateCreate DateTime     @default(now())
  products   Product[]
  image      SellerImage?
}

model SellerImage {
  id          String   @id @default(uuid())
  sellerId    String   @unique
  seller      Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  imageUrl    String
  dateCreated DateTime @default(now())
}

enum STAFF_ROLE {
  ADMIN
  MODERATOR
  SALES
}

model Staff {
  id          String       @id @default(uuid())
  firstName   String
  lastName    String
  email       String       @unique
  staffId     Int          @unique @default(autoincrement())
  password    String
  active      Boolean      @default(true)
  role        STAFF_ROLE   @default(SALES)
  dateCreated DateTime     @default(now())
  image       StaffImage?
  complaints  Complaints[]
}

model StaffImage {
  id          String   @id @default(uuid())
  staffId     String   @unique
  staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  imageUrl    String
  dateCreated DateTime @default(now())
}

enum PRODUCT_CATEGORY {
  ELECTRONICS
  BOOKS
  CLOTHING
  HOME_KITCHEN
  BEAUTY_HEALTH
  SPORTS_OUTDOORS
  TOYS_GAMES
}

model Product {
  id                 String           @id @default(uuid())
  name               String
  description        String
  price              Float
  stock              Int
  category           PRODUCT_CATEGORY
  sales              Int              @default(0)
  discountPercentage Int              @default(0)
  sellerId           String
  seller             Seller           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  images             ProductImages[]
  orders             OrderProducts[]
  cartItems          CartItems[]
  favoriteItems      FavoriteItems[]
  comments           Comment[]
  dateCreated        DateTime         @default(now())
}

model ProductImages {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageUrl    String
  dateCreated DateTime @default(now())
}

model Comment {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  content     String
  dateCreated DateTime @default(now())
}

enum ORDER_STATUS {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id            String          @id @default(uuid())
  customerId    String
  user          Customer        @relation(fields: [customerId], references: [id])
  total         Float
  dateCreated   DateTime        @default(now())
  orderProducts OrderProducts[]
  payment       Payment?
}

model OrderProducts {
  id          String       @id @default(uuid())
  orderId     String
  order       Order        @relation(fields: [orderId], references: [id])
  productId   String
  product     Product      @relation(fields: [productId], references: [id])
  quantity    Int
  price       Float
  status      ORDER_STATUS @default(PENDING)
  dateCreated DateTime     @default(now())
}

enum PAYMENT_STATUS {
  PENDING
  PAID
  FAILED
}

model Payment {
  id          String         @id @default(uuid())
  orderId     String         @unique
  order       Order          @relation(fields: [orderId], references: [id])
  amount      Float
  currency    String
  status      PAYMENT_STATUS @default(PENDING)
  dateCreated DateTime       @default(now())
}

enum COMPLAINT_STATUS {
  PENDING
  VIEWED
  RESOLVED
}

model Complaints {
  id           String           @id @default(uuid())
  email        String
  name         String
  phone        String?
  message      String
  status       COMPLAINT_STATUS @default(PENDING)
  dateCreated  DateTime         @default(now())
  staffId      String?
  staff        Staff?           @relation(fields: [staffId], references: [id])
  dateResolved DateTime?
}
