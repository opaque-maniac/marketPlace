// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String     @id @default(uuid())
  email     String     @unique
  firstName String
  lastName  String
  password  String
  image     UserImage?
  wishlist  WishList?
  cart      Cart?
  orders    Order[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model UserImage {
  id         String   @id @default(uuid())
  customerID String   @unique
  url        String
  customer   Customer @relation(fields: [customerID], references: [id])
  createdAt  DateTime @default(now())
}

model Seller {
  id        String       @id @default(uuid())
  email     String       @unique
  name      String
  password  String
  image     SellerImage?
  products  Product[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model SellerImage {
  id        String   @id @default(uuid())
  sellerID  String   @unique
  url       String
  seller    Seller   @relation(fields: [sellerID], references: [id])
  createdAt DateTime @default(now())
}

enum STAFF_ROLE {
  ADMIN
  MANAGER
  STAFF
}

model Staff {
  id         String      @id @default(uuid())
  email      String      @unique
  firstName  String
  lastName   String
  password   String
  role       STAFF_ROLE
  image      StaffImage?
  complaints Complaint[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model StaffImage {
  id        String   @id @default(uuid())
  staffID   String   @unique
  url       String
  staff     Staff    @relation(fields: [staffID], references: [id])
  createdAt DateTime @default(now())
}

enum CATEGORIES {
  ELECTRONICS
  FASHION
  HOME
  BEAUTY
  SPORTS
  FOOD
  BOOKS
  TOYS
  OTHER
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String
  price         Float
  category      CATEGORIES
  sellerID      String
  seller        Seller         @relation(fields: [sellerID], references: [id])
  images        ProductImage[]
  cartItems     CartItem[]
  wishlistItems WishListItem[]
  orderItems    OrderItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  inventory     Int
}

model ProductImage {
  id        String   @id @default(uuid())
  productID String   @unique
  url       String
  product   Product  @relation(fields: [productID], references: [id])
  createdAt DateTime @default(now())
}

model Cart {
  id         String     @id @default(uuid())
  customerID String     @unique
  customer   Customer   @relation(fields: [customerID], references: [id])
  cartItems  CartItem[]
  createdAt  DateTime   @default(now())
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  productID String
  cartID    String
  product   Product  @relation(fields: [productID], references: [id])
  cart      Cart     @relation(fields: [cartID], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishList {
  id            String         @id @default(uuid())
  customerID    String         @unique
  customer      Customer       @relation(fields: [customerID], references: [id])
  wishlistItems WishListItem[]
  createdAt     DateTime       @default(now())
}

model WishListItem {
  id         String   @id @default(uuid())
  productID  String
  wishlistID String
  product    Product  @relation(fields: [productID], references: [id])
  wishlist   WishList @relation(fields: [wishlistID], references: [id])
  createdAt  DateTime @default(now())
}

enum ORDER_STATUS {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id         String       @id @default(uuid())
  totalAmout Float?
  status     ORDER_STATUS
  customerID String
  customer   Customer     @relation(fields: [customerID], references: [id])
  orderItems OrderItem[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  productID String
  orderID   String
  product   Product @relation(fields: [productID], references: [id])
  order     Order   @relation(fields: [orderID], references: [id])
}

model Complaint {
  id        String   @id @default(uuid())
  email     String
  name      String
  message   String
  createdAt DateTime @default(now())
  resolved  Boolean  @default(false)
  staffID   String?
  staff     Staff?   @relation(fields: [staffID], references: [id])
}
